namespace cv2
import gdip
import cv2.types
var dll = ..raw.loadDll("~/lib/cv2/.res/OpenCvSharpExtern.dll","cv2","cdecl")
imread = function(path,mode=1/*_CV2_IMREAD_COLOR*/){
    var path = ..io.fullpath(path)
	if(..io.exist(path)){
		var err,ret = dll.imgcodecs_imread(path,mode,{ptr p})
		return ..cv2.mat(ret.p)
	}
	return null;
}

imshow = function(winName="",matHandle){
    var winName = ..string.fromto( winName )
	dll.highgui_imshow(winName,matHandle)
}

destroyAllWindows = function(){
	dll.highgui_destroyAllWindows()
}

waitKey = function(code=0){
    var err,stu = dll.highgui_waitKey(code,{int val})
	return stu.val
}

getTickCount = function(){
	return dll.core_getTickCountL(); 
}

imwrite = function(filename,img){
	dll.imgcodecs_imwrite(filename,img,{},0)
}

resize = function(src,dsize,fx=1.0,fy=1.0,interpolation=1/*_CV2_INTER_LINEAR*/){
	var dst = ..cv2.mat()
	var err = imgproc_resize(src.cvPtr,dst.cvPtr,dsize,fx,fy,interpolation)
	return dst; 
}

cvtColor = function(src,code,dstCn=0){
    var dst = ..cv2.mat()
	var err = dll.imgproc_cvtColor(src.cvPtr,dst.cvPtr,code,dstCn)
	assert(!err,"转换失败!")
	return dst;
}

medianBlur = function(srcMat,ksize){
    var dstMat = ..cv2.mat()
	var err = dll.imgproc_medianBlur(srcMat.cvPtr,dstMat.cvPtr,ksize)
	return dstMat; 
}

gaussianBlur = function(srcMat,ksize,sigmaX=0,sigmaY=0,borderType=4/*_CV2_BORDER_DEFAULT*/){
    var dstMat = ..cv2.mat()
    err = imgproc_GaussianBlur(srcMat.cvPtr,dstMat.cvPtr,ksize,sigmaX,sigmaY,borderType)
    return dstMat; 
}

blur = function(srcMat,ksize,anchor,borderType=4/*_CV2_BORDER_DEFAULT*/){
	var dstMat = ..cv2.mat()
	anchor = anchor : ::POINT(-1,-1)
	var err = dll.imgproc_blur(srcMat.cvPtr,dstMat.cvPtr,ksize,anchor,borderType)
	return dstMat; 
}

boxFilter = function(srcMat,ddepth=-1,ksize,anchor,normalize=true,borderType=4/*_CV2_BORDER_DEFAULT*/){
	var dstMat = ..cv2.mat()
	anchor = anchor : ::POINT(-1,-1)
	var err = dll.imgproc_boxFilter(srcMat.cvPtr,dstMat.cvPtr,ddepth,ksize,anchor,normalize,borderType)
	return dstMat; 
}

threshold = function(src,thresh,maxVal=255,thresholdType=0x0/*_CV2_THRESH_BINARY*/){
	var dst = ..cv2.mat();
	var err,ret = imgproc_threshold(src.cvPtr,dst.cvPtr,thresh,maxVal,thresholdType,0)
	return dst
}

canny = function(src,threshold1, threshold2, apertureSize=3, L2gradient=true){
	var dst = ..cv2.mat()
	imgproc_Canny1(src.cvPtr,dst.cvPtr,threshold1,threshold2,apertureSize,L2gradient)
	return dst; 	
}

line = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0,tipLength=0.1){
    var err = dll.imgproc_line(src.cvPtr,from,to,scalar,thickness,lineType,shift)
	return src; 
}

arrowedLine = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0,tipLength=0.1){
	var err = imgproc_arrowedLine(src.cvPtr,from,to,scalar,thickness,lineType,shift,tipLength)
	return src; 
}

rectangle = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0){
	var err = dll.imgproc_rectangle_InputOutputArray_Point(src.cvPtr,from,to,scalar,thickness,lineType,shift);
	return src; 
}

circle = function(src,center,radius,scalar,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0){
    var err = dll.imgproc_circle(src.cvPtr,center,radius,scalar,thickness,lineType,shift)
	return src; 
}

ellipse = function(src,center,axes,angle,startAngle,endAngle,color,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0){
	var err = imgproc_ellipse1(src.cvPtr,center,axes,angle,startAngle,endAngle,color,thickness,lineType,shift)
	return src; 
}

drawMarker = function(src,position,color,markerType,markerSize=20,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/){
    var err = dll.imgproc_drawMarker(src.cvPtr,position,color,markerType,markerSize,thickness,lineType)
    return src; 
}

putText = function(src,text,position,font=0/*_CV2_HersheyFonts_FONT_HERSHEY_SIMPLEX*/,fontSize=1,color,thickness=1){
    if !color color = ::Scalar(255,255,255)
	var err = imgproc_putText(src.cvPtr,text,position,font,fontSize,color,thickness,0x10/*_CV2_LineTypes_LINE_AA*/,0)
	return src; 
}


getStructuringElement = function(shape=0/*_CV2_MorphShapes_MORPH_RECT*/,ksize,anchor){
	anchor = anchor : ::POINT(-1,-1)
	var ref = {pointer p};
	var err,ret = dll.imgproc_getStructuringElement(shape,ksize,anchor,ref);
	return ..cv2.mat(ref.p); 
}

morphologyEx = function(src,op,kernel,iterations=1,anchor,borderType=0/*_CV2_BORDER_CONSTANT*/,borderValue){
    anchor = anchor : ::POINT(-1,-1)
    var dst = ..cv2.mat()
	if(borderType==0/*_CV2_BorderTypes_BORDER_CONSTANT*/ or !borderValue){
    	borderValue = ::Scalar(0,0,0)
    }
    var err = dll.imgproc_morphologyEx(src.cvPtr,dst.cvPtr,op,kernel.cvPtr,anchor,iterations,borderType,borderValue);
    return dst; 
}

copyMakeBorder = function(src,top,bottom,left,right,borderType=0/*_CV2_BorderTypes_BORDER_CONSTANT*/,color){
    var dst = ..cv2.mat();
    if(borderType==0/*_CV2_BorderTypes_BORDER_CONSTANT*/ or !color){
    	color = ::Scalar(0,0,0)
    }
	var err = dll.core_copyMakeBorder(src.cvPtr,dst.cvPtr,top,bottom,left,right,borderType,color)
	return dst; 
}

bitwise_not = function(src,dst){
	
}

// todo
videoCapture = function(index,apiPreference=0){
	return dll.videoio_VideoCapture_new3(index,apiPreference)
}

_dll = dll
imgproc_GaussianBlur = dll.api("imgproc_GaussianBlur","int(pointer src,pointer dst,struct ksize,double sigmaX, double sigmaY, int borderType)")
imgproc_resize = dll.api("imgproc_resize","pointer(pointer,pointer,struct,double,double,int)")
imgproc_threshold = dll.api("imgproc_threshold","int(pointer src,pointer dst,double thresh,double maxVal, int type, double& returnValue)")
imgproc_Canny1 = dll.api("imgproc_Canny1","int(pointer src,pointer edges,double threshold1,double threshold2,int apertureSize, bool L2gradient)" )
imgproc_arrowedLine = dll.api("imgproc_arrowedLine","int(pointer src,struct pt1,struct pt2,struct color,int thickness, int line_type, int shift, double tipLength)" )
imgproc_ellipse1 = dll.api("imgproc_ellipse1","int(pointer img,struct center,struct axes,double angle,double startAngle,double endAngle,struct color,int thickness,int lineType,int shift)")
imgproc_putText = dll.api("imgproc_putText","int(pointer img,string text,struct org,int fontFace,double fontScale,struct color,int thickness,int lineType, int bottomLeftOrigin)")

namespace cv2{
    import fsys
	import cv2.mat
}

/**intellisense(cv2)
imread() = !matObject.
imread(.(图片路径,载入模式) = 读取图片
imshow(.(窗口标题,显示内容) = 弹出窗口,显示图片
destroyAllWindows() = 销毁所有cv2窗体
waitKey() = 窗口等待键盘指令,返回按键代码
threshold(.(灰度图,起始值,最大值,二值化算法-默认THRESH_BINARY) = 图像阈值处理
medianBlur(.(源数据,核大小) = 中值滤波
resize(.(源数据,::SIZE对象,x轴缩放倍数,y轴缩放倍数,插值方式) = 调整图片大小
gaussianBlur(.(输入图像,::SIZE对象 高斯核大小,X方向上的高斯核标准偏差, Y方向上的高斯核标准差,边缘模式) = 高斯滤波
blur(.(输入图像,::SIZE对象 核大小) = 均值滤波,对于椒盐噪声的滤除效果比较好。
boxFilter(.(输入图像,输出图像深度 默认-1 与输入图像相同,::SIZE对象 核大小,是否标准化 默认true 为false时与blur函数相同,边缘模式) = 方块滤波
cvtColor(.(输入图像,颜色空间代码) = 转换颜色空间
canny(.(输入图像,阈值1,阈值2,Sobel算子大小 默认3,是否使用L2范数 默认true) = 边缘检测
line(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素,线条类型 可选 ) = 在输入图像上画线段
arrowedLine(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素 ,线条类型 可选,箭头笔尖的长度 默认0.1 ) = 在输入图像上画箭头线段
rectangle(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画矩形
circle(.(输入图像,中心点坐标 POINT对象,圆半径,线条颜色 Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画圆形
ellipse(.(输入图像,椭圆中心坐标 POINT对象,椭圆长轴短轴 SIZE对象,椭圆旋转角度以度为单位,椭圆弧的起始角度以度为单位,椭圆弧的终止角度以度为单位,线条颜色 Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画椭圆
drawMarker(.(输入图像,图案坐标,图案描边颜色,图案类型,图案尺寸 默认20,线条宽带 默认1像素,线条类型 可选) = 在输入图像上画图案
putText(.(输入图像,文字,左上角坐标,字体 可选,字体大小 可选,颜色Scalar对象BGRA 可选,字体粗细 可选) = 在输入图像上写文字
copyMakeBorder(.(输入图像,上边宽度,下边宽度,左边宽度,右边宽度,边界类型 可选,边框类型为0时,可设置边框颜色 默认黑色) = 扩充图像边框,返回新图像
getStructuringElement(.(元素形状 默认矩形,元素大小 ::SIZE对象,锚点位置 默认中心点) = 返回指定形状和尺寸的内核矩阵 
morphologyEx(.(输入图像,形态学类别,锚点中心,迭代次数 默认为1) = 通用形态学变换,可作用在输入图像上
end intellisense**/

/**intellisense(!matObject)
type() = 图片类型
width = 图片宽度
height = 图片高度
channels() = 图片通道数
depth() = 图片深度
shape = 图片形状，包括高度、宽度、通道数
empty() = 判断是否图像是否为空
size() = 获取图片尺寸,返回::SIZE结构体
toBitmap() = 转换为bitmap对象,返回bitmap对象
end intellisense**/
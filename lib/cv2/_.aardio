namespace cv2
import gdip

var dll = ..raw.loadDll("~/lib/cv2/.res/OpenCvSharpExtern.dll","cv2","cdecl")
imread = function(path,mode=1/*_CV2_IMREAD_COLOR*/){
    var path = ..io.fullpath(path)
	if(..io.exist(path)){
		var err,ret = dll.imgcodecs_imread(path,mode,{ptr p})
		return ..cv2.mat(ret.p)
	}
	return null;
}

imshow = function(winName="",matHandle){
    var winName = ..string.fromto( winName )
	dll.highgui_imshow(winName,matHandle)
}

destroyAllWindows = function(){
	dll.highgui_destroyAllWindows()
}

waitKey = function(code=0){
    var err,stu = dll.highgui_waitKey(code,{int val})
	return stu.val
}

getTickCount = function(){
	return dll.core_getTickCountL(); 
}

imwrite = function(filename,img){
	dll.imgcodecs_imwrite(filename,img,{},0)
}

resize = function(src,dsize,fx=1.0,fy=1.0,interpolation=1/*_CV2_INTER_LINEAR*/){
	var dst = ..cv2.mat()
	var err = imgproc_resize(src.cvPtr,dst.cvPtr,dsize,fx,fy,interpolation)
	return dst; 
}

cvtColor = function(src,code,dstCn=0){
    var dst = ..cv2.mat()
	var err = dll.imgproc_cvtColor(src.cvPtr,dst.cvPtr,code,dstCn)
	assert(!err,"转换失败!")
	return dst;
}

medianBlur = function(srcMat,ksize){
    var dstMat = ..cv2.mat()
	var err = dll.imgproc_medianBlur(srcMat.cvPtr,dstMat.cvPtr,ksize)
	return dstMat; 
}

gaussianBlur = function(srcMat,ksize,sigmaX=0,sigmaY=0,borderType=4/*_CV2_BORDER_DEFAULT*/){
    var dstMat = ..cv2.mat()
    err = imgproc_GaussianBlur(srcMat.cvPtr,dstMat.cvPtr,ksize,sigmaX,sigmaY,borderType)
    return dstMat; 
}

blur = function(srcMat,ksize,anchor,borderType=4/*_CV2_BORDER_DEFAULT*/){
	var dstMat = ..cv2.mat()
	anchor = anchor : ::POINT(-1,-1)
	var err = dll.imgproc_blur(srcMat.cvPtr,dstMat.cvPtr,ksize,anchor,borderType)
	return dstMat; 
}

boxFilter = function(srcMat,ddepth=-1,ksize,anchor,normalize=true,borderType=4/*_CV2_BORDER_DEFAULT*/){
	var dstMat = ..cv2.mat()
	anchor = anchor : ::POINT(-1,-1)
	var err = dll.imgproc_boxFilter(srcMat.cvPtr,dstMat.cvPtr,ddepth,ksize,anchor,normalize,borderType)
	return dstMat; 
}

threshold = function(src,thresh,maxVal=255,thresholdType=0x0/*_CV2_THRESH_BINARY*/){
	var dst = ..cv2.mat();
	var err,ret = imgproc_threshold(src.cvPtr,dst.cvPtr,thresh,maxVal,thresholdType,0)
	return dst
}

canny = function(src,threshold1, threshold2, apertureSize=3, L2gradient=true){
	var dst = ..cv2.mat()
	imgproc_Canny1(src.cvPtr,dst.cvPtr,threshold1,threshold2,apertureSize,L2gradient)
	return dst; 	
}

line = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/,shift=0){
    var err = dll.imgproc_line(src.cvPtr,from,to,scalar,thickness,lineType,shift)
	return src; 
}

//
bitwise_not = function(src,dst){
	
}

// todo
videoCapture = function(index,apiPreference=0){
	return dll.videoio_VideoCapture_new3(index,apiPreference)
}

_dll = dll
imgproc_GaussianBlur = dll.api("imgproc_GaussianBlur","int(pointer src,pointer dst,struct ksize,double sigmaX, double sigmaY, int borderType)")
imgproc_resize = dll.api("imgproc_resize","pointer(pointer,pointer,struct,double,double,int)")
imgproc_threshold = dll.api("imgproc_threshold","int(pointer src,pointer dst,double thresh,double maxVal, int type, double& returnValue)")
imgproc_Canny1 = dll.api("imgproc_Canny1","int(pointer src,pointer edges,double threshold1,double threshold2,int apertureSize, bool L2gradient)" )
namespace cv2{
    import fsys
	import cv2.mat
}

/**intellisense(cv2)
imread() = !matObject.
imread(.(图片路径,载入模式) = 读取图片
imshow(.(窗口标题,显示内容) = 弹出窗口,显示图片
destroyAllWindows() = 销毁所有cv2窗体
waitKey() = 窗口等待键盘指令,返回按键代码
threshold(.(灰度图,起始值,最大值,二值化算法-默认THRESH_BINARY) = 图像阈值处理
medianBlur(.(源数据,核大小) = 中值滤波
resize(.(源数据,::SIZE对象,x轴缩放倍数,y轴缩放倍数,插值方式) = 调整图片大小
gaussianBlur(.(输入图像,::SIZE对象 高斯核大小,X方向上的高斯核标准偏差, Y方向上的高斯核标准差,边缘模式) = 高斯滤波
blur(.(输入图像,::SIZE对象 核大小) = 均值滤波,对于椒盐噪声的滤除效果比较好。
boxFilter(.(输入图像,输出图像深度 默认-1 与输入图像相同,::SIZE对象 核大小,是否标准化 默认true 为false时与blur函数相同,边缘模式) = 方块滤波
cvtColor(.(输入图像,颜色空间代码) = 转换颜色空间
canny(.(输入图像,阈值1,阈值2,Sobel算子大小 默认3,是否使用L2范数 默认true) = 边缘检测
line(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素,线条类型 可选 ) = 在输入图像上画直线
end intellisense**/

/**intellisense(!matObject)
type() = 图片类型
width = 图片宽度
height = 图片高度
channels() = 图片通道数
depth() = 图片深度
shape = 图片形状，包括高度、宽度、通道数
empty() = 判断是否图像是否为空
size() = 获取图片尺寸,返回::SIZE结构体
end intellisense**/

//cv2 常量表
/**intellisense()
_CV2_THRESH_BINARY=@0x0/*_CV2_THRESH_BINARY*/
_CV2_THRESH_BINARY_INV=@0x1/*_CV2_THRESH_BINARY_INV*/
_CV2_THRESH_TRUNC=@0x2/*_CV2_THRESH_TRUNC*/
_CV2_THRESH_TOZERO=@0x3/*_CV2_THRESH_TOZERO*/
_CV2_THRESH_TOZERO_INV=@0x4/*_CV2_THRESH_TOZERO_INV*/
_CV_THRESH_MASK = @0x7/*_CV_THRESH_MASK*/
_CV_THRESH_OTSU = @0x8/*_CV_THRESH_OTSU*/
_CV_THRESH_TRIANGLE = @0x16/*_CV_THRESH_TRIANGLE*/

_CV2_BORDER_CONSTANT=@0/*_CV2_BORDER_CONSTANT*/
_CV2_BORDER_REPLICATE=@1/*_CV2_BORDER_REPLICATE*/
_CV2_BORDER_REFLECT=@2/*_CV2_BORDER_REFLECT*/
_CV2_BORDER_WRAP=@3/*_CV2_BORDER_WRAP*/
_CV2_BORDER_REFLECT_101=@4/*_CV2_BORDER_REFLECT_101*/
_CV2_BORDER_TRANSPARENT=@5/*_CV2_BORDER_TRANSPARENT*/
_CV2_BORDER_REFLECT101=@4/*_CV2_BORDER_REFLECT101*/
_CV2_BORDER_DEFAULT=@4/*_CV2_BORDER_DEFAULT*/
_CV2_BORDER_ISOLATED=@0x10/*_CV2_BORDER_ISOLATED*/

_CV2_INTER_NEAREST=@0/*_CV2_INTER_NEAREST*/
_CV2_INTER_LINEAR=@1/*_CV2_INTER_LINEAR*/
_CV2_INTER_CUBIC=@2/*_CV2_INTER_CUBIC*/
_CV2_INTER_AREA=@3/*_CV2_INTER_AREA*/
_CV2_INTER_LANCZOS4=@4/*_CV2_INTER_LANCZOS4*/
_CV2_INTER_LINEAR_EXACT=@5/*_CV2_INTER_LINEAR_EXACT*/
_CV2_INTER_NEAREST_EXACT=@6/*_CV2_INTER_NEAREST_EXACT*/
_CV2_INTER_MAX=@7/*_CV2_INTER_MAX*/
_CV2_WARP_FILL_OUTLIERS=@8/*_CV2_WARP_FILL_OUTLIERS*/
_CV2_WARP_INVERSE_MAP=@0x10/*_CV2_WARP_INVERSE_MAP*/

_CV2_IMREAD_UNCHANGED=@-1/*_CV2_IMREAD_UNCHANGED*/
_CV2_IMREAD_GRAYSCALE=@0/*_CV2_IMREAD_GRAYSCALE*/
_CV2_IMREAD_COLOR=@1/*_CV2_IMREAD_COLOR*/
_CV2_IMREAD_ANYCOLOR=@4/*_CV2_IMREAD_ANYCOLOR*/
_CV2_IMREAD_LOAD_GDAL=@8/*_CV2_IMREAD_LOAD_GDAL*/
_CV2_IMREAD_REDUCED_GRAYSCALE_2=@0x10/*_CV2_IMREAD_REDUCED_GRAYSCALE_2*/
_CV2_IMREAD_REDUCED_COLOR_2=@0x11/*_CV2_IMREAD_REDUCED_COLOR_2*/
_CV2_IMREAD_REDUCED_GRAYSCALE_4=@0x20/*_CV2_IMREAD_REDUCED_GRAYSCALE_4*/
_CV2_IMREAD_REDUCED_COLOR_4=@0x21/*_CV2_IMREAD_REDUCED_COLOR_4*/
_CV2_IMREAD_REDUCED_GRAYSCALE_8=@0x40/*_CV2_IMREAD_REDUCED_GRAYSCALE_8*/
_CV2_IMREAD_REDUCED_COLOR_8=@0x41/*_CV2_IMREAD_REDUCED_COLOR_8*/
_CV2_IMREAD_IGNORE_ORIENTATION=@0x80/*_CV2_IMREAD_IGNORE_ORIENTATION*/
end intellisense**/

//颜色空间转换
 /**intellisense()
_CV2_COLOR_BGR2BGRA=@0/*_CV2_COLOR_BGR2BGRA*/
_CV2_COLOR_RGB2RGBA=@0/*_CV2_COLOR_RGB2RGBA*/
_CV2_COLOR_BGRA2BGR=@1/*_CV2_COLOR_BGRA2BGR*/
_CV2_COLOR_RGBA2RGB=@1/*_CV2_COLOR_RGBA2RGB*/
_CV2_COLOR_BGR2RGBA=@2/*_CV2_COLOR_BGR2RGBA*/
_CV2_COLOR_RGB2BGRA=@2/*_CV2_COLOR_RGB2BGRA*/
_CV2_COLOR_RGBA2BGR=@3/*_CV2_COLOR_RGBA2BGR*/
_CV2_COLOR_BGRA2RGB=@3/*_CV2_COLOR_BGRA2RGB*/
_CV2_COLOR_BGR2RGB=@4/*_CV2_COLOR_BGR2RGB*/
_CV2_COLOR_RGB2BGR=@4/*_CV2_COLOR_RGB2BGR*/
_CV2_COLOR_BGRA2RGBA=@5/*_CV2_COLOR_BGRA2RGBA*/
_CV2_COLOR_RGBA2BGRA=@5/*_CV2_COLOR_RGBA2BGRA*/
_CV2_COLOR_BGR2GRAY=@6/*_CV2_COLOR_BGR2GRAY*/
_CV2_COLOR_RGB2GRAY=@7/*_CV2_COLOR_RGB2GRAY*/
_CV2_COLOR_GRAY2BGR=@8/*_CV2_COLOR_GRAY2BGR*/
_CV2_COLOR_GRAY2RGB=@8/*_CV2_COLOR_GRAY2RGB*/
_CV2_COLOR_GRAY2BGRA=@9/*_CV2_COLOR_GRAY2BGRA*/
_CV2_COLOR_GRAY2RGBA=@9/*_CV2_COLOR_GRAY2RGBA*/
_CV2_COLOR_BGRA2GRAY=@0xA/*_CV2_COLOR_BGRA2GRAY*/
_CV2_COLOR_RGBA2GRAY=@0xB/*_CV2_COLOR_RGBA2GRAY*/
_CV2_COLOR_BGR2BGR565=@0xC/*_CV2_COLOR_BGR2BGR565*/
_CV2_COLOR_RGB2BGR565=@0xD/*_CV2_COLOR_RGB2BGR565*/
_CV2_COLOR_BGR5652BGR=@0xE/*_CV2_COLOR_BGR5652BGR*/
_CV2_COLOR_BGR5652RGB=@0xF/*_CV2_COLOR_BGR5652RGB*/
_CV2_COLOR_BGRA2BGR565=@0x10/*_CV2_COLOR_BGRA2BGR565*/
_CV2_COLOR_RGBA2BGR565=@0x11/*_CV2_COLOR_RGBA2BGR565*/
_CV2_COLOR_BGR5652BGRA=@0x12/*_CV2_COLOR_BGR5652BGRA*/
_CV2_COLOR_BGR5652RGBA=@0x13/*_CV2_COLOR_BGR5652RGBA*/
_CV2_COLOR_GRAY2BGR565=@0x14/*_CV2_COLOR_GRAY2BGR565*/
_CV2_COLOR_BGR5652GRAY=@0x15/*_CV2_COLOR_BGR5652GRAY*/
_CV2_COLOR_BGR2BGR555=@0x16/*_CV2_COLOR_BGR2BGR555*/
_CV2_COLOR_RGB2BGR555=@0x17/*_CV2_COLOR_RGB2BGR555*/
_CV2_COLOR_BGR5552BGR=@0x18/*_CV2_COLOR_BGR5552BGR*/
_CV2_COLOR_BGR5552RGB=@0x19/*_CV2_COLOR_BGR5552RGB*/
_CV2_COLOR_BGRA2BGR555=@0x1A/*_CV2_COLOR_BGRA2BGR555*/
_CV2_COLOR_RGBA2BGR555=@0x1B/*_CV2_COLOR_RGBA2BGR555*/
_CV2_COLOR_BGR5552BGRA=@0x1C/*_CV2_COLOR_BGR5552BGRA*/
_CV2_COLOR_BGR5552RGBA=@0x1D/*_CV2_COLOR_BGR5552RGBA*/
_CV2_COLOR_GRAY2BGR555=@0x1E/*_CV2_COLOR_GRAY2BGR555*/
_CV2_COLOR_BGR5552GRAY=@0x1F/*_CV2_COLOR_BGR5552GRAY*/
_CV2_COLOR_BGR2XYZ=@0x20/*_CV2_COLOR_BGR2XYZ*/
_CV2_COLOR_RGB2XYZ=@0x21/*_CV2_COLOR_RGB2XYZ*/
_CV2_COLOR_XYZ2BGR=@0x22/*_CV2_COLOR_XYZ2BGR*/
_CV2_COLOR_XYZ2RGB=@0x23/*_CV2_COLOR_XYZ2RGB*/
_CV2_COLOR_BGR2YCrCb=@0x24/*_CV2_COLOR_BGR2YCrCb*/
_CV2_COLOR_RGB2YCrCb=@0x25/*_CV2_COLOR_RGB2YCrCb*/
_CV2_COLOR_YCrCb2BGR=@0x26/*_CV2_COLOR_YCrCb2BGR*/
_CV2_COLOR_YCrCb2RGB=@0x27/*_CV2_COLOR_YCrCb2RGB*/
_CV2_COLOR_BGR2HSV=@0x28/*_CV2_COLOR_BGR2HSV*/
_CV2_COLOR_RGB2HSV=@0x29/*_CV2_COLOR_RGB2HSV*/
_CV2_COLOR_BGR2Lab=@0x2C/*_CV2_COLOR_BGR2Lab*/
_CV2_COLOR_RGB2Lab=@0x2D/*_CV2_COLOR_RGB2Lab*/
_CV2_COLOR_BGR2Luv=@0x32/*_CV2_COLOR_BGR2Luv*/
_CV2_COLOR_RGB2Luv=@0x33/*_CV2_COLOR_RGB2Luv*/
_CV2_COLOR_BGR2HLS=@0x34/*_CV2_COLOR_BGR2HLS*/
_CV2_COLOR_RGB2HLS=@0x35/*_CV2_COLOR_RGB2HLS*/
_CV2_COLOR_HSV2BGR=@0x36/*_CV2_COLOR_HSV2BGR*/
_CV2_COLOR_HSV2RGB=@0x37/*_CV2_COLOR_HSV2RGB*/
_CV2_COLOR_Lab2BGR=@0x38/*_CV2_COLOR_Lab2BGR*/
_CV2_COLOR_Lab2RGB=@0x39/*_CV2_COLOR_Lab2RGB*/
_CV2_COLOR_Luv2BGR=@0x3A/*_CV2_COLOR_Luv2BGR*/
_CV2_COLOR_Luv2RGB=@0x3B/*_CV2_COLOR_Luv2RGB*/
_CV2_COLOR_HLS2BGR=@0x3C/*_CV2_COLOR_HLS2BGR*/
_CV2_COLOR_HLS2RGB=@0x3D/*_CV2_COLOR_HLS2RGB*/
_CV2_COLOR_BGR2HSV_FULL=@0x42/*_CV2_COLOR_BGR2HSV_FULL*/
_CV2_COLOR_RGB2HSV_FULL=@0x43/*_CV2_COLOR_RGB2HSV_FULL*/
_CV2_COLOR_BGR2HLS_FULL=@0x44/*_CV2_COLOR_BGR2HLS_FULL*/
_CV2_COLOR_RGB2HLS_FULL=@0x45/*_CV2_COLOR_RGB2HLS_FULL*/
_CV2_COLOR_HSV2BGR_FULL=@0x46/*_CV2_COLOR_HSV2BGR_FULL*/
_CV2_COLOR_HSV2RGB_FULL=@0x47/*_CV2_COLOR_HSV2RGB_FULL*/
_CV2_COLOR_HLS2BGR_FULL=@0x48/*_CV2_COLOR_HLS2BGR_FULL*/
_CV2_COLOR_HLS2RGB_FULL=@0x49/*_CV2_COLOR_HLS2RGB_FULL*/
_CV2_COLOR_LBGR2Lab=@0x4A/*_CV2_COLOR_LBGR2Lab*/
_CV2_COLOR_LRGB2Lab=@0x4B/*_CV2_COLOR_LRGB2Lab*/
_CV2_COLOR_LBGR2Luv=@0x4C/*_CV2_COLOR_LBGR2Luv*/
_CV2_COLOR_LRGB2Luv=@0x4D/*_CV2_COLOR_LRGB2Luv*/
_CV2_COLOR_Lab2LBGR=@0x4E/*_CV2_COLOR_Lab2LBGR*/
_CV2_COLOR_Lab2LRGB=@0x4F/*_CV2_COLOR_Lab2LRGB*/
_CV2_COLOR_Luv2LBGR=@0x50/*_CV2_COLOR_Luv2LBGR*/
_CV2_COLOR_Luv2LRGB=@0x51/*_CV2_COLOR_Luv2LRGB*/
_CV2_COLOR_BGR2YUV=@0x52/*_CV2_COLOR_BGR2YUV*/
_CV2_COLOR_RGB2YUV=@0x53/*_CV2_COLOR_RGB2YUV*/
_CV2_COLOR_YUV2BGR=@0x54/*_CV2_COLOR_YUV2BGR*/
_CV2_COLOR_YUV2RGB=@0x55/*_CV2_COLOR_YUV2RGB*/
_CV2_COLOR_YUV2RGB_NV12=@0x5A/*_CV2_COLOR_YUV2RGB_NV12*/
_CV2_COLOR_YUV2BGR_NV12=@0x5B/*_CV2_COLOR_YUV2BGR_NV12*/
_CV2_COLOR_YUV2RGB_NV21=@0x5C/*_CV2_COLOR_YUV2RGB_NV21*/
_CV2_COLOR_YUV2BGR_NV21=@0x5D/*_CV2_COLOR_YUV2BGR_NV21*/
_CV2_COLOR_YUV420sp2RGB=@0x5C/*_CV2_COLOR_YUV420sp2RGB*/
_CV2_COLOR_YUV420sp2BGR=@0x5D/*_CV2_COLOR_YUV420sp2BGR*/
_CV2_COLOR_YUV2RGBA_NV12=@0x5E/*_CV2_COLOR_YUV2RGBA_NV12*/
_CV2_COLOR_YUV2BGRA_NV12=@0x5F/*_CV2_COLOR_YUV2BGRA_NV12*/
_CV2_COLOR_YUV2RGBA_NV21=@0x60/*_CV2_COLOR_YUV2RGBA_NV21*/
_CV2_COLOR_YUV2BGRA_NV21=@0x61/*_CV2_COLOR_YUV2BGRA_NV21*/
_CV2_COLOR_YUV420sp2RGBA=@0x60/*_CV2_COLOR_YUV420sp2RGBA*/
_CV2_COLOR_YUV420sp2BGRA=@0x61/*_CV2_COLOR_YUV420sp2BGRA*/
_CV2_COLOR_YUV2RGB_YV12=@0x62/*_CV2_COLOR_YUV2RGB_YV12*/
_CV2_COLOR_YUV2BGR_YV12=@0x63/*_CV2_COLOR_YUV2BGR_YV12*/
_CV2_COLOR_YUV2RGB_IYUV=@0x64/*_CV2_COLOR_YUV2RGB_IYUV*/
_CV2_COLOR_YUV2BGR_IYUV=@0x65/*_CV2_COLOR_YUV2BGR_IYUV*/
_CV2_COLOR_YUV2RGB_I420=@0x64/*_CV2_COLOR_YUV2RGB_I420*/
_CV2_COLOR_YUV2BGR_I420=@0x65/*_CV2_COLOR_YUV2BGR_I420*/
_CV2_COLOR_YUV420p2RGB=@0x62/*_CV2_COLOR_YUV420p2RGB*/
_CV2_COLOR_YUV420p2BGR=@0x63/*_CV2_COLOR_YUV420p2BGR*/
_CV2_COLOR_YUV2RGBA_YV12=@0x66/*_CV2_COLOR_YUV2RGBA_YV12*/
_CV2_COLOR_YUV2BGRA_YV12=@0x67/*_CV2_COLOR_YUV2BGRA_YV12*/
_CV2_COLOR_YUV2RGBA_IYUV=@0x68/*_CV2_COLOR_YUV2RGBA_IYUV*/
_CV2_COLOR_YUV2BGRA_IYUV=@0x69/*_CV2_COLOR_YUV2BGRA_IYUV*/
_CV2_COLOR_YUV2RGBA_I420=@0x68/*_CV2_COLOR_YUV2RGBA_I420*/
_CV2_COLOR_YUV2BGRA_I420=@0x69/*_CV2_COLOR_YUV2BGRA_I420*/
_CV2_COLOR_YUV420p2RGBA=@0x66/*_CV2_COLOR_YUV420p2RGBA*/
_CV2_COLOR_YUV420p2BGRA=@0x67/*_CV2_COLOR_YUV420p2BGRA*/
_CV2_COLOR_YUV2GRAY_420=@0x6A/*_CV2_COLOR_YUV2GRAY_420*/
_CV2_COLOR_YUV2GRAY_NV21=@0x6A/*_CV2_COLOR_YUV2GRAY_NV21*/
_CV2_COLOR_YUV2GRAY_NV12=@0x6A/*_CV2_COLOR_YUV2GRAY_NV12*/
_CV2_COLOR_YUV2GRAY_YV12=@0x6A/*_CV2_COLOR_YUV2GRAY_YV12*/
_CV2_COLOR_YUV2GRAY_IYUV=@0x6A/*_CV2_COLOR_YUV2GRAY_IYUV*/
_CV2_COLOR_YUV2GRAY_I420=@0x6A/*_CV2_COLOR_YUV2GRAY_I420*/
_CV2_COLOR_YUV420sp2GRAY=@0x6A/*_CV2_COLOR_YUV420sp2GRAY*/
_CV2_COLOR_YUV420p2GRAY=@0x6A/*_CV2_COLOR_YUV420p2GRAY*/
_CV2_COLOR_YUV2RGB_UYVY=@0x6B/*_CV2_COLOR_YUV2RGB_UYVY*/
_CV2_COLOR_YUV2BGR_UYVY=@0x6C/*_CV2_COLOR_YUV2BGR_UYVY*/
_CV2_COLOR_YUV2RGB_Y422=@0x6B/*_CV2_COLOR_YUV2RGB_Y422*/
_CV2_COLOR_YUV2BGR_Y422=@0x6C/*_CV2_COLOR_YUV2BGR_Y422*/
_CV2_COLOR_YUV2RGB_UYNV=@0x6B/*_CV2_COLOR_YUV2RGB_UYNV*/
_CV2_COLOR_YUV2BGR_UYNV=@0x6C/*_CV2_COLOR_YUV2BGR_UYNV*/
_CV2_COLOR_YUV2RGBA_UYVY=@0x6F/*_CV2_COLOR_YUV2RGBA_UYVY*/
_CV2_COLOR_YUV2BGRA_UYVY=@0x70/*_CV2_COLOR_YUV2BGRA_UYVY*/
_CV2_COLOR_YUV2RGBA_Y422=@0x6F/*_CV2_COLOR_YUV2RGBA_Y422*/
_CV2_COLOR_YUV2BGRA_Y422=@0x70/*_CV2_COLOR_YUV2BGRA_Y422*/
_CV2_COLOR_YUV2RGBA_UYNV=@0x6F/*_CV2_COLOR_YUV2RGBA_UYNV*/
_CV2_COLOR_YUV2BGRA_UYNV=@0x70/*_CV2_COLOR_YUV2BGRA_UYNV*/
_CV2_COLOR_YUV2RGB_YUY2=@0x73/*_CV2_COLOR_YUV2RGB_YUY2*/
_CV2_COLOR_YUV2BGR_YUY2=@0x74/*_CV2_COLOR_YUV2BGR_YUY2*/
_CV2_COLOR_YUV2RGB_YVYU=@0x75/*_CV2_COLOR_YUV2RGB_YVYU*/
_CV2_COLOR_YUV2BGR_YVYU=@0x76/*_CV2_COLOR_YUV2BGR_YVYU*/
_CV2_COLOR_YUV2RGB_YUYV=@0x73/*_CV2_COLOR_YUV2RGB_YUYV*/
_CV2_COLOR_YUV2BGR_YUYV=@0x74/*_CV2_COLOR_YUV2BGR_YUYV*/
_CV2_COLOR_YUV2RGB_YUNV=@0x73/*_CV2_COLOR_YUV2RGB_YUNV*/
_CV2_COLOR_YUV2BGR_YUNV=@0x74/*_CV2_COLOR_YUV2BGR_YUNV*/
_CV2_COLOR_YUV2RGBA_YUY2=@0x77/*_CV2_COLOR_YUV2RGBA_YUY2*/
_CV2_COLOR_YUV2BGRA_YUY2=@0x78/*_CV2_COLOR_YUV2BGRA_YUY2*/
_CV2_COLOR_YUV2RGBA_YVYU=@0x79/*_CV2_COLOR_YUV2RGBA_YVYU*/
_CV2_COLOR_YUV2BGRA_YVYU=@0x7A/*_CV2_COLOR_YUV2BGRA_YVYU*/
_CV2_COLOR_YUV2RGBA_YUYV=@0x77/*_CV2_COLOR_YUV2RGBA_YUYV*/
_CV2_COLOR_YUV2BGRA_YUYV=@0x78/*_CV2_COLOR_YUV2BGRA_YUYV*/
_CV2_COLOR_YUV2RGBA_YUNV=@0x77/*_CV2_COLOR_YUV2RGBA_YUNV*/
_CV2_COLOR_YUV2BGRA_YUNV=@0x78/*_CV2_COLOR_YUV2BGRA_YUNV*/
_CV2_COLOR_YUV2GRAY_UYVY=@0x7B/*_CV2_COLOR_YUV2GRAY_UYVY*/
_CV2_COLOR_YUV2GRAY_YUY2=@0x7C/*_CV2_COLOR_YUV2GRAY_YUY2*/
_CV2_COLOR_YUV2GRAY_Y422=@0x7B/*_CV2_COLOR_YUV2GRAY_Y422*/
_CV2_COLOR_YUV2GRAY_UYNV=@0x7B/*_CV2_COLOR_YUV2GRAY_UYNV*/
_CV2_COLOR_YUV2GRAY_YVYU=@0x7C/*_CV2_COLOR_YUV2GRAY_YVYU*/
_CV2_COLOR_YUV2GRAY_YUYV=@0x7C/*_CV2_COLOR_YUV2GRAY_YUYV*/
_CV2_COLOR_YUV2GRAY_YUNV=@0x7C/*_CV2_COLOR_YUV2GRAY_YUNV*/
_CV2_COLOR_RGBA2mRGBA=@0x7D/*_CV2_COLOR_RGBA2mRGBA*/
_CV2_COLOR_mRGBA2RGBA=@0x7E/*_CV2_COLOR_mRGBA2RGBA*/
_CV2_COLOR_RGB2YUV_I420=@0x7F/*_CV2_COLOR_RGB2YUV_I420*/
_CV2_COLOR_BGR2YUV_I420=@0x80/*_CV2_COLOR_BGR2YUV_I420*/
_CV2_COLOR_RGB2YUV_IYUV=@0x7F/*_CV2_COLOR_RGB2YUV_IYUV*/
_CV2_COLOR_BGR2YUV_IYUV=@0x80/*_CV2_COLOR_BGR2YUV_IYUV*/
_CV2_COLOR_RGBA2YUV_I420=@0x81/*_CV2_COLOR_RGBA2YUV_I420*/
_CV2_COLOR_BGRA2YUV_I420=@0x82/*_CV2_COLOR_BGRA2YUV_I420*/
_CV2_COLOR_RGBA2YUV_IYUV=@0x81/*_CV2_COLOR_RGBA2YUV_IYUV*/
_CV2_COLOR_BGRA2YUV_IYUV=@0x82/*_CV2_COLOR_BGRA2YUV_IYUV*/
_CV2_COLOR_RGB2YUV_YV12=@0x83/*_CV2_COLOR_RGB2YUV_YV12*/
_CV2_COLOR_BGR2YUV_YV12=@0x84/*_CV2_COLOR_BGR2YUV_YV12*/
_CV2_COLOR_RGBA2YUV_YV12=@0x85/*_CV2_COLOR_RGBA2YUV_YV12*/
_CV2_COLOR_BGRA2YUV_YV12=@0x86/*_CV2_COLOR_BGRA2YUV_YV12*/
_CV2_COLOR_BayerBG2BGR=@0x2E/*_CV2_COLOR_BayerBG2BGR*/
_CV2_COLOR_BayerGB2BGR=@0x2F/*_CV2_COLOR_BayerGB2BGR*/
_CV2_COLOR_BayerRG2BGR=@0x30/*_CV2_COLOR_BayerRG2BGR*/
_CV2_COLOR_BayerGR2BGR=@0x31/*_CV2_COLOR_BayerGR2BGR*/
_CV2_COLOR_BayerBG2RGB=@0x30/*_CV2_COLOR_BayerBG2RGB*/
_CV2_COLOR_BayerGB2RGB=@0x31/*_CV2_COLOR_BayerGB2RGB*/
_CV2_COLOR_BayerRG2RGB=@0x2E/*_CV2_COLOR_BayerRG2RGB*/
_CV2_COLOR_BayerGR2RGB=@0x2F/*_CV2_COLOR_BayerGR2RGB*/
_CV2_COLOR_BayerBG2GRAY=@0x56/*_CV2_COLOR_BayerBG2GRAY*/
_CV2_COLOR_BayerGB2GRAY=@0x57/*_CV2_COLOR_BayerGB2GRAY*/
_CV2_COLOR_BayerRG2GRAY=@0x58/*_CV2_COLOR_BayerRG2GRAY*/
_CV2_COLOR_BayerGR2GRAY=@0x59/*_CV2_COLOR_BayerGR2GRAY*/
_CV2_COLOR_BayerBG2BGR_VNG=@0x3E/*_CV2_COLOR_BayerBG2BGR_VNG*/
_CV2_COLOR_BayerGB2BGR_VNG=@0x3F/*_CV2_COLOR_BayerGB2BGR_VNG*/
_CV2_COLOR_BayerRG2BGR_VNG=@0x40/*_CV2_COLOR_BayerRG2BGR_VNG*/
_CV2_COLOR_BayerGR2BGR_VNG=@0x41/*_CV2_COLOR_BayerGR2BGR_VNG*/
_CV2_COLOR_BayerBG2RGB_VNG=@0x40/*_CV2_COLOR_BayerBG2RGB_VNG*/
_CV2_COLOR_BayerGB2RGB_VNG=@0x41/*_CV2_COLOR_BayerGB2RGB_VNG*/
_CV2_COLOR_BayerRG2RGB_VNG=@0x3E/*_CV2_COLOR_BayerRG2RGB_VNG*/
_CV2_COLOR_BayerGR2RGB_VNG=@0x3F/*_CV2_COLOR_BayerGR2RGB_VNG*/
_CV2_COLOR_BayerBG2BGR_EA=@0x87/*_CV2_COLOR_BayerBG2BGR_EA*/
_CV2_COLOR_BayerGB2BGR_EA=@0x88/*_CV2_COLOR_BayerGB2BGR_EA*/
_CV2_COLOR_BayerRG2BGR_EA=@0x89/*_CV2_COLOR_BayerRG2BGR_EA*/
_CV2_COLOR_BayerGR2BGR_EA=@0x8A/*_CV2_COLOR_BayerGR2BGR_EA*/
_CV2_COLOR_BayerBG2RGB_EA=@0x89/*_CV2_COLOR_BayerBG2RGB_EA*/
_CV2_COLOR_BayerGB2RGB_EA=@0x8A/*_CV2_COLOR_BayerGB2RGB_EA*/
_CV2_COLOR_BayerRG2RGB_EA=@0x87/*_CV2_COLOR_BayerRG2RGB_EA*/
_CV2_COLOR_BayerGR2RGB_EA=@0x88/*_CV2_COLOR_BayerGR2RGB_EA*/
_CV2_COLOR_BayerBG2BGRA=@0x8B/*_CV2_COLOR_BayerBG2BGRA*/
_CV2_COLOR_BayerGB2BGRA=@0x8C/*_CV2_COLOR_BayerGB2BGRA*/
_CV2_COLOR_BayerRG2BGRA=@0x8D/*_CV2_COLOR_BayerRG2BGRA*/
_CV2_COLOR_BayerGR2BGRA=@0x8E/*_CV2_COLOR_BayerGR2BGRA*/
_CV2_COLOR_BayerBG2RGBA=@0x8D/*_CV2_COLOR_BayerBG2RGBA*/
_CV2_COLOR_BayerGB2RGBA=@0x8E/*_CV2_COLOR_BayerGB2RGBA*/
_CV2_COLOR_BayerRG2RGBA=@0x8B/*_CV2_COLOR_BayerRG2RGBA*/
_CV2_COLOR_BayerGR2RGBA=@0x8C/*_CV2_COLOR_BayerGR2RGBA*/
_CV2_COLOR_COLORCVT_MAX=@0x8F/*_CV2_COLOR_COLORCVT_MAX*/

_CV_8U=@0/*_CV_8U*/
_CV_8S=@1/*_CV_8S*/
_CV_16U=@2/*_CV_16U*/
_CV_16S=@3/*_CV_16S*/
_CV_32S=@4/*_CV_32S*/
_CV_32F=@5/*_CV_32F*/
_CV_64F=@6/*_CV_64F*/
_CV_16F=@7/*_CV_16F*/

_CV2_LineTypes_FILLED=@-1/*_CV2_LineTypes_FILLED*/
_CV2_LineTypes_LINE_4=@4/*_CV2_LineTypes_LINE_4*/
_CV2_LineTypes_LINE_8=@8/*_CV2_LineTypes_LINE_8*/
_CV2_LineTypes_LINE_AA=@0x10/*_CV2_LineTypes_LINE_AA*/
end intellisense**/
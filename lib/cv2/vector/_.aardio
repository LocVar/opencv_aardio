import util.metaProperty
namespace cv2.vector
var dll = ..raw.loadDll("~/lib/cv2/.res/OpenCvSharpExtern.dll","opencv2","cdecl")
class mat
{
	ctor( arg ){
		if type(arg)== type.number {
			this.handle = dll.vector_Mat_new2P(arg)
		}elseif(type(arg)== type.table){
			this.handle = dll.vector_Mat_new3P({pointer p[]=arg},#arg)
		}
		elseif(!arg){
			this.handle = dll.vector_Mat_new1P()
		}
		//this["$cache"] = { @{_weak="kv"}}
		this["$cache"] = { }
		..table.gc( this,"release" )
	};
	
	toArray = function(){
		var dst = {}
		var size = this.size;
		var dstPtr = {}
		for(i=1;size;1){
			var m = ..cv2.mat()
			..table.push( dst, m );
			..table.push( dstPtr,m.cvPtr )
		}
		if(size){
			var re = dll.vector_Mat_assignToArray(this.handle,{ptr p[] = dst;})
		}
		return dst;
	}
	
	release = function(){
		if(this[["handle"]]){
			dll.vector_Mat_delete(this.handle)
		}
		this[["handle"]] = null
	}
	
	@_meta;	
}

namespace mat{
    _meta = ..util.metaProperty(
    	_type = "vectorOfMat";
    	_topointer = function(){
    		return owner.handle; 
    	}
    	__get = function(k){
    		if(!#owner[["$cache"]]){
    			owner[["$cache"]] = owner.toArray()
    		}
    		return owner[["$cache"]][[k]]; 
    	}
    	_len = function(t) {
			return owner.size; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_Mat_getSize(owner.handle);
    		}	
    	};
    	elemPtr = {
    		_get = function(){
    			return dll.vector_Mat_getPointerP(owner.handle); 
    		}
    	}
    )	
}

class string{
	ctor( size ){
		if(!size){
			this.ptr = dll.vector_string_new1P()
		}else {
			assert(size>=0,"size应当大于等于0")
			this.ptr = dll.vector_string_new2P(size)
		}
		..table.gc(this,"release")
	};
	
	toArray = function(){
		var size = this.size;
		var strArray = {}
		var v,ret,ret2 = dll.vector_string_getElements(this.ptr,{pointer cPtrs[]={length=size}},{int lens[]={length=size}})
		for(i=1;size;1){
			var s = ..raw.tostring(ret.cPtrs[i],1,ret2.lens[i])
			..table.push( strArray,s )
		}
		return strArray; 
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_string_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace string{
	_meta = ..util.metaProperty(
		_type = "vectorOfString";
		_topointer = function(){
			return owner.ptr; 
		}
		
		size = {
			_get = function(){ 
				return dll.vector_string_getSize(owner.ptr); 
			}
		};
	)
}

class int32{
	ctor( size ){
		if(!size){
			this.ptr = dll.vector_int32_new1P()
		}else {
			assert(size>=0,"size应当大于等于0")
			this.ptr = dll.vector_int32_new2P(size)
		}
		..table.gc(this,"release")
	};
	
	toArray = function(){
		var size = this.size;
		var ret = ..raw.convert( this.elemPtr,{int v[]={length=size}});
		return ret.v; 
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_int32_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace int32{
	_meta = ..util.metaProperty(
		_type = "vectorOfInt32";
		_topointer = function(){
			return owner.ptr; 
		}
		size = {
			_get = function(){ 
				return dll.vector_int32_getSize(owner.ptr); 
			}
		};
		elemPtr = {
			_get = function(){
				return dll.vector_int32_getPointerP(owner.ptr)
			}
		}
	)
}

class float{
	ctor( arg,dataLength ){
		if(!arg){
			this.ptr = dll.vector_float_new1P(arg)
		}elseif(type(arg)==type.number){
			this.ptr = dll.vector_float_new2P(arg)
		}
	};
	
	toArray = function(){
		var size = this.size;
		var ret = ..raw.convert( this.elemPtr,{float v[]={length=size}});
		return ret.v; 
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_float_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace float{
    _meta = ..util.metaProperty( 
		_type = "vectorOfFloat";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_float_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_float_getPointerP(owner.ptr)
			}
		}
    )
}

class double{
	ctor( arg,dataLength ){
		if(!arg){
			this.ptr = dll.vector_double_new1P(arg)
		}elseif(type(arg)==type.number){
			this.ptr = dll.vector_double_new2P(arg)
		}
	};
	
	toArray = function(){
		var size = this.size;
		var ret = ..raw.convert( this.elemPtr,{double v[]={length=size}});
		return ret.v; 
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.vector_double_delete(this.ptr)
		}
		this[["ptr"]] = null
	}
	@_meta
}

namespace double{
    _meta = ..util.metaProperty( 
		_type = "vectorOfDouble";
		_topointer = function(){
			return owner.ptr; 
		}
    	size = {
    		_get = function(){ 
    			return dll.vector_double_getSize(owner.ptr); 
    		}
    	};
		elemPtr = {
			_get = function(){
				return dll.vector_double_getPointerP(owner.ptr)
			}
		}
    )
}
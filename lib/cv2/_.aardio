namespace cv2
import console
var dll = ..raw.loadDll("~/lib/cv2/.res/OpenCvSharpExtern.dll","opencv2","cdecl")

var f2i = function(p){
    return ::POINT(..math.round(p.x),..math.round(p.y)); 
}

/*imgcodecs{{*/
imread = function(path,mode=1/*_CV2_IMREAD_COLOR*/){
    var path = ..io.fullpath(path)
	if(..io.exist(path)){
		var err,ret = dll.imgcodecs_imread(..string.fromto(path),mode,{ptr p})
		return ..cv2.mat(ret.p)
	}
	return null;
}

imwrite = function(filename,img){
	dll.imgcodecs_imwrite(filename,img,null,null)
}


/*}}*/

/*highgui{{*/
imshow = function(winName="",matHandle){
    var winName = ..string.fromto( winName )
	dll.highgui_imshow(winName,matHandle)
}

destroyAllWindows = function(){
	dll.highgui_destroyAllWindows()
}

waitKey = function(code=0){
    var err,stu = dll.highgui_waitKey(code,{int val})
	return stu.val
}

namedWindow = function(winName,flag=1/*_CV2_WINDOW_AUTOSIZE*/){
	var err = dll.highgui_namedWindow(winName,flag)
	return err; 
}

cvGetWindowHandle = function(name){
	var err,ret = dll.highgui_cvGetWindowHandle(name,{int value})
	return ret.value; 
}


/*}}*/

/*core{{*/
getTickCount = function(){
    var err,ret = dll.core_getTickCount({LONG value});
	return ret.value
}

copyMakeBorder = function(src,top,bottom,left,right,borderType=0/*_CV2_BorderTypes_BORDER_CONSTANT*/,color){
    var dst = ..cv2.mat();
    if(borderType==0/*_CV2_BorderTypes_BORDER_CONSTANT*/ or !color){
    	color = ::Scalar(0,0,0)
    }
	var err = dll.core_copyMakeBorder(src.cvPtr,dst.cvPtr,top,bottom,left,right,borderType,color)
	return dst; 
}

bitwise_and = function(src1,src2){
    var dst = ..cv2.mat();
	var err = dll.core_bitwise_and(src1.cvPtr,src2.cvPtr.dst.cvPtr,null);
	return dst; 
}

bitwise_or = function(src1,src2){
    var dst = ..cv2.mat();
	var err = dll.core_bitwise_or(src1.cvPtr,src2.cvPtr.dst.cvPtr,null);
	return dst; 
}

bitwise_xor = function(src1,src2){
    var dst = ..cv2.mat();
	var err = dll.core_bitwise_xor(src.cvPtr,src2.cvPtr,dst.cvPtr,null)
	return dst; 
}

bitwise_not = function(src){
	var err = dll.core_bitwise_not(src.cvPtr,src.cvPtr,null)
	return src; 
}

core_normalize= dll.api("core_normalize","INT(pointer src,pointer dst,double alpha,double beta,int normType,int dtype,pointer mask)")
normalize = function(src,alpha,beta,normType=0x20/*_CV2_NormTypes_NORM_MINMAX*/,dtype=-1,mask){
	//mask = mask : ..cv2.mat().cvPtr
	var err = core_normalize(src.cvPtr,src.cvPtr,alpha,beta,normType,dtype,topointer(0))
	return src; 
}

split = function(src){
    var vecMat = ..cv2.vectorOfMat()
    var err,ret = dll.core_split(src,vecMat.handle);
    var result = ..table.map(vecMat.toArray(),function(v,k,result){
			return ..cv2.mat(v); 
	})
	return ..table.unpack(result)
}

merge = function(srcs){
    //var vecMat = ..cv2.vectorOfMat(srcs)
    var dst = ..cv2.mat();
	dll.core_merge({ ptr p[] = srcs },#srcs,dst);
	return dst; 
}

flip = function(src,flipCode){
    var dst = ..cv2.mat();
	var err = dll.core_flip(src.cvPtr,dst.cvPtr,flipCode)
	return dst; 
}

subtract = function(src1,src2,mask,dtype){
    var dst = ..cv2.mat();
    mask = mask ? mask.cvPtr
	var err = dll.core_subtract_InputArray2(src1.cvPtr,src2.cvPtr,dst.cvPtr,mask,dtype)
	return dst;
}

add = function(src1,src2,mask,dtype){
	var dst = ..cv2.mat();
	mask = mask ? mask.cvPtr
	var  err = dll.core_add(src1.cvPtr,src2.cvPtr,dst.cvPtr,mask,dtype)
	return dst; 
}

addWeighted = function(src1,alpha,src2,beta,gamma=0,dtype=-1){
    var dst = ..cv2.mat();
    var err = core_addWeighted(src1.cvPtr,alpha,src2.cvPtr,beta,gamma,dst.cvPtr,dtype);
    return dst; 
}

minMaxLoc = function(src){
    minLoc0 = ::POINT();
    maxLoc0 = ::POINT();
	var err,minVal,maxVal = core_minMaxLoc2(src.cvPtr,0,0,minLoc0,maxLoc0,null)
	return minVal,maxVal,minLoc0,maxLoc0; 
}

rotate = function(src,rotateCode){
	var dst = ..cv2.mat();
	var err = dll.core_rotate(src.cvPtr,dst.cvPtr,rotateCode);
	return dst; 
}

/*}}*/

/*imgproc{{*/
resize = function(src,dsize,fx=1.0,fy=1.0,interpolation=1/*_CV2_INTER_LINEAR*/){
	var dst = ..cv2.mat();
	dsize = dsize : ::SIZE()
	var err = imgproc_resize(src.cvPtr,dst.cvPtr,dsize,fx,fy,interpolation)
	return dst; 
}

cvtColor = function(src,code,dstCn=0){
    var dst = ..cv2.mat();
	var err = dll.imgproc_cvtColor(src.cvPtr,dst.cvPtr,code,dstCn)
	assert(!err,"转换失败!")
	return dst;
}

medianBlur = function(src,ksize){
    var dst = ..cv2.mat()
	var err = dll.imgproc_medianBlur(src.cvPtr,dst.cvPtr,ksize)
	return dst; 
}

gaussianBlur = function(srcMat,ksize,sigmaX=0,sigmaY=0,borderType=4/*_CV2_BORDER_DEFAULT*/){
    var dstMat = ..cv2.mat()
    err = imgproc_GaussianBlur(srcMat.cvPtr,dstMat.cvPtr,ksize,sigmaX,sigmaY,borderType)
    return dstMat; 
}

blur = function(srcMat,ksize,anchor,borderType=4/*_CV2_BORDER_DEFAULT*/){
	var dstMat = ..cv2.mat()
	anchor = anchor : ::POINT(-1,-1)
	var err = dll.imgproc_blur(srcMat.cvPtr,dstMat.cvPtr,ksize,anchor,borderType)
	return dstMat; 
}

boxFilter = function(srcMat,ddepth=-1,ksize,anchor,normalize=true,borderType=4/*_CV2_BORDER_DEFAULT*/){
	anchor = anchor : ::POINT(-1,-1)
	var dst = ..cv2.mat()
	var err = dll.imgproc_boxFilter(srcMat.cvPtr,dst.cvPtr,ddepth,ksize,anchor,normalize,borderType)
	return dst; 
}

threshold = function(src,thresh,maxVal=255,thresholdType=0x0/*_CV2_THRESH_BINARY*/){
	var dst = ..cv2.mat()
	var err,ret = imgproc_threshold(src.cvPtr,dst.cvPtr,thresh,maxVal,thresholdType,0)
	return dst
}

adaptiveThreshold = function(src,maxValue,adaptiveMethod=1/*_CV2_ADAPTIVE_THRESH_GAUSSIAN_C*/,thresholdType=0x0/*_CV2_THRESH_BINARY*/,blockSize,C){
	var dst = ..cv2.mat()
	var err = imgproc_adaptiveThreshold(src.cvPtr,dst.cvPtr,maxValue,adaptiveMethod,thresholdType,blockSize,C);
	return dst; 	
}

canny = function(src,threshold1, threshold2, apertureSize=3, L2gradient=true){
	var dst = ..cv2.mat()
	imgproc_Canny1(src.cvPtr,dst.cvPtr,threshold1,threshold2,apertureSize,L2gradient)
	return dst; 	
}

line = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LINE_AA*/,shift=0,tipLength=0.1){
    var err = dll.imgproc_line(src.cvPtr,f2i(from),f2i(to),scalar,thickness,lineType,shift)
	return src; 
}

arrowedLine = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LINE_AA*/,shift=0,tipLength=0.1){
	var err = imgproc_arrowedLine(src.cvPtr,from,to,scalar,thickness,lineType,shift,tipLength)
	return src; 
}

rectangle = function(src,from,to,scalar,thickness=1,lineType=0x10/*_CV2_LINE_AA*/,shift=0){
	var err = dll.imgproc_rectangle_InputOutputArray_Point(src.cvPtr,from,to,scalar,thickness,lineType,shift);
	return src; 
}

circle = function(src,center,radius,scalar,thickness=1,lineType=0x10/*_CV2_LINE_AA*/,shift=0){
    var err = dll.imgproc_circle(src.cvPtr,center,radius,scalar,thickness,lineType,shift)
	return src; 
}

ellipse = function(src,center,axes,angle,startAngle,endAngle,color,thickness=1,lineType=0x10/*_CV2_LINE_AA*/,shift=0){
	var err = imgproc_ellipse1(src.cvPtr,center,axes,angle,startAngle,endAngle,color,thickness,lineType,shift)
	return src; 
}

drawMarker = function(src,position,color,markerType,markerSize=20,thickness=1,lineType=0x10/*_CV2_LINE_AA*/){
    var err = dll.imgproc_drawMarker(src.cvPtr,position,color,markerType,markerSize,thickness,lineType)
    return src; 
}

putText = function(src,text,position,font=0/*_CV2_FONT_HERSHEY_SIMPLEX*/,fontSize=1,color,thickness=1){
    if !color color = ::Scalar(255,255,255)
	var err = imgproc_putText(src.cvPtr,text,f2i(position),font,fontSize,color,thickness,0x10/*_CV2_LINE_AA*/,0)
	return src; 
}

getStructuringElement = function(shape=0/*_CV2_MORPH_RECT*/,ksize,anchor){
	anchor = anchor : ::POINT(-1,-1)
	var ref = {pointer p};
	var err,ret = dll.imgproc_getStructuringElement(shape,ksize,anchor,ref);
	return ..cv2.mat(ref.p); 
}

morphologyEx = function(src,op,kernel,iterations=1,anchor,borderType=0/*_CV2_BORDER_CONSTANT*/,borderValue){
    anchor = anchor : ::POINT(-1,-1)
    var dst = ..cv2.mat()
	if(borderType==0/*_CV2_BORDER_CONSTANT*/ or !borderValue){
    	borderValue = ::Scalar(0,0,0)
    }
    var err = dll.imgproc_morphologyEx(src.cvPtr,dst.cvPtr,op,kernel.cvPtr,anchor,iterations,borderType,borderValue);
    return dst; 
}

erode = function(src,kernel,iterations=1,anchor,borderType=0/*_CV2_BORDER_CONSTANT*/,borderValue){
	anchor = anchor : ::POINT(-1,-1)
	var dst = ..cv2.mat()
	if(borderType==0/*_CV2_BORDER_CONSTANT*/ or !borderValue){
    	borderValue = ::Scalar(0,0,0)
    } 
	var err = dll.imgproc_erode(src.cvPtr,dst.cvPtr,kernel.cvPtr,anchor,iterations,borderType,borderValue);
    return dst; 
}

dilate = function(src,kernel,iterations=1,anchor,borderType=0/*_CV2_BORDER_CONSTANT*/,borderValue){
	anchor = anchor : ::POINT(-1,-1)
	var dst = ..cv2.mat()
	if(borderType==0/*_CV2_BORDER_CONSTANT*/ or !borderValue){
    	borderValue = ::Scalar(0,0,0)
    } 
	var err = dll.imgproc_dilate(src.cvPtr,dst.cvPtr,kernel.cvPtr,anchor,iterations,borderType,borderValue);
    return dst; 
}

distanceTransform = function(src,distanceType,maskSize){
	var dst = ..cv2.mat();
	var err = dll.imgproc_distanceTransform(src.cvPtr,dst.cvPtr,distanceType,maskSize,null);
	return dst; 
}

findContours = function(src,mode=3/*_CV2_RETR_TREE*/,method=2/*_CV2_CHAIN_APPROX_SIMPLE*/){
    var contours = ..cv2.vector.mat()
    var hierarchy = ..cv2.mat()
	var err = dll.imgproc_findContours1_OutputArray(src.cvPtr,contours,hierarchy.cvPtr,mode,method,::POINT())
	return src,contours,hierarchy; 
}

drawContours = function(src,contours,contourIdx=-1,color,thickness=1,lineType=0x10/*_CV2_LineTypes_LINE_AA*/){
    var cType = type.rget(contours);
    if(cType=="vectorOfMat"){
    	contours = contours.toArray()
    }
    var contoursLength = #contours
    
    color = color : (::Scalar(0,255,0))
    var err = dll.imgproc_drawContours_InputArray(src.cvPtr,{ ptr p[] = contours },contoursLength,contourIdx,color,thickness,lineType,null,0x7FFFFFFF/*_MAXLONG*/,::POINT())
	return src; 
}

minAreaRect = function(points){
    //var mp = ..cv2.mat(points)
    var err,ret = dll.imgproc_minAreaRect_InputArray(points.cvPtr,::RotatedRect( ::POINTF(),::POINTF(),0 ))
	//mp.release()
	return ret; 
}

boxPoints = function(box){
    var ref = {
		struct value[] = {
			length = 4;
			::POINTF();
		}
    }
    var err = dll.imgproc_boxPoints_Point2f(box,ref)
    return ref.value;
}

matchTemplate = function(src,temp,mode=5/*_CV2_TM_CCOEFF_NORMED*/,mask){
    var dst = ..cv2.mat()
	var err = dll.imgproc_matchTemplate(src.cvPtr,temp.cvPtr,dst.cvPtr,mode,mask)
	return dst; 
}

/*}}*/

/*videoio{{*/
class videoCapture{
	ctor( index,apiPreference=0 ){
		//dll = ..cv2._dll;
		var err,ret = dll.videoio_VideoCapture_new1({pointer p})
		this.ptr = ret.p
		var tArg = type(index)
		if(tArg==type.string && #index < 0x410/*_MAX_PATH_U8*/){
			err,ret = dll.videoio_VideoCapture_open1(this.ptr,index,apiPreference,{int value})
		}elseif(tArg==type.number){
			err,ret = dll.videoio_VideoCapture_open2(this.ptr,index,apiPreference,{int value})
		}
	};
	
	isOpened = function(){
		var err,ret = dll.videoio_VideoWriter_isOpened(this.ptr,{int op})
		return ret.op==1; 
	}
	
	read = function(){
		var dst = ..cv2.mat()
		var err,ret = dll.videoio_VideoCapture_read_OutputArray(this.ptr,dst.cvPtr,{int value})	
		return ret.value==1,dst
	}
	
	grab = function(){
		var err,ret = dll.videoio_VideoCapture_grab(this.ptr,{int value});
		return ret.value==1; 
	}
	
	retrieve = function(flag=0){
		var dst = ..cv2.mat();
		var err,ret = dll.videoio_VideoCapture_retrieve_OutputArray(this.ptr,dst.cvPtr,flag,{int value})
		return ret==1,dst; 
	}
	
	get = function(propId){
		var err,ret = ..cv2.videoio_VideoCapture_get(this.ptr,propId,0)
		return ret;
	}
	
	set = function(propId,value){
		var err,ret = ..cv2.videoio_VideoCapture_set(this.ptr,propId,value,0)
		return ret==1; 
	}
	
	getBackendName = function(){
		var buf = ..raw.buffer(255);
		var err = dll.videoio_VideoCapture_getBackendName(this.ptr,buf)
		return ..raw.str(buf)
	}
	
	release = function(){
		dll.videoio_VideoCapture_delete(this.ptr)
	}
}

/*}}*/

//dnn 深度神经网络
class dnn_DetectionModel{
	ctor( cfg,weights,backend=3/*_CV2_DNN_BACKEND_OPENCV*/,target=0/*_CV2_DNN_TARGET_CPU*/ ){
		err,ret = dll.dnn_readNetFromDarknet(cfg,weights,{pointer value});
		if(!err){
			this.ptr = ret.value
			dll.dnn_Net_setPreferableBackend(this.ptr,backend);
			dll.dnn_Net_setPreferableTarget(this.ptr,target)
		}
	};
	
	getUnconnectedOutLayers = function(){
		var vecInt32 = ..cv2.vector.int32();
		dll.dnn_Net_getUnconnectedOutLayers(this.ptr,vecInt32)
		return vecInt32.toArray(); ; 
	}
	
	getUnconnectedOutLayersNames = function(){
		var vecString = ..cv2.vector.string();
		dll.dnn_Net_getUnconnectedOutLayersNames(this.ptr,vecString)
		return vecString.toArray(); 
	}
	
	getLayerNames = function(){
		var vecString = ..cv2.vector.string()
		dll.dnn_Net_getLayerNames(this.ptr,vecString);
		return vecString.toArray(); 
	}
	
	getOutputsNames = function(){
		
	}
	
	setInputSize = function(w,h){
		this.size = ::SIZE(w,h)
	}
	
	setInputScale = function(scale){
		this.scale = scale : (1.0/255)
	}
	
	setInputSwapRB = function(swap=true){
		this.swap = swap
	}
	
	blobFromImage = function(src){
		var mean = ::Scalar(0,0,0)
		var ret,ret2,ret3 = ..cv2.dnn_blobFromImage(src,this.scale,this.size,mean,1,0,null)
		return ret2
	}
	
	setInput = function(blob){
		dll.dnn_Net_setInput(this.ptr,blob,"data")
	}
	
	forward = function(names){
		var outs = ..cv2.vector.mat(1)
		var cvPtrs = ..table.map(outs.toArray(),function(v,k,result){
			return v.handle; 
		})
		var err,ret = dll.dnn_Net_forward3(this.ptr,{pointer value[]=cvPtrs},1,{string s[]=names},#names)
		var vmat = ..cv2.vector.mat(ret.value)
		var mats = vmat.toArray();
		
		var confidences = ..cv2.vector.float()
		
		for(i=1;#mats;1){
			var data = mats[i].data;
			var fdata = ..raw.convertArray(data,4,"float")
			for(j=1;mats[i].rows;1){
				var scores = mats[i].row(j-1).colRange(5,mats[i].cols);
				var minVal,maxVal,minLoc0,maxLoc0 = ..cv2.minMaxLoc(scores)
				if(maxVal>0.5){
					centerX = fdata[1] * this.size.cx
					centerY = fdata[2] * this.size.cy
					width = fdata[3] * this.size.cx
					height = fdata[4] * this.size.cy
					//data += mats[i].cols
					//..raw.convert(
					..console.log("convert pre",mats[i].cols )
					data = topointer(tonumber( data ) + mats[i].cols)
					..console.log("convert:",data)
					fdata = ..raw.convertArray(data,4,"float")
					..console.log("loop in data:",centerX,centerY,width,height)
				}
			
			}
		}
	}
}

//以下为第三方库，按需封装
/*WeChatQRCode{{*/
class wechat_qrcode_WeChatQRCode{
	ctor( detector_prototxt_path,detector_caffe_model_path,super_resolution_prototxt_path,super_resolution_caffe_model_path){
		var err,ret = dll.wechat_qrcode_WeChatQRCode_new(detector_prototxt_path,
		detector_caffe_model_path,
		super_resolution_prototxt_path,
		super_resolution_caffe_model_path,{pointer value})
		this.ptr = ret.value
		..table.gc( this,"release" )
	};
	
	detectAndDecode = function(img){
		var points = ..cv2.vector.mat()
		var lists = ..cv2.vector.string();
		var err = dll.wechat_qrcode_WeChatQRCode_detectAndDecode(this.ptr,img.cvPtr,points,lists);
		var mats = points.toArray();
		resPoints = ..table.map(mats,function(v,k,result){
			var minRect = ..cv2.minAreaRect(v);
			var minRectPoints = ..cv2.boxPoints(minRect)
			v.release()
			return minRectPoints;
		})
		var reLists = lists.toArray()
		points.release();
		lists.release()
		return reLists,resPoints;
	}
	
	release = function(){
		if(this[["ptr"]]){
			dll.wechat_qrcode_WeChatQRCode_delete(this.ptr);
			this[["ptr"]] = null
		}
	}
}
/*}}*/

_dll = dll
imgproc_GaussianBlur = dll.api("imgproc_GaussianBlur","int(pointer src,pointer dst,struct ksize,double sigmaX, double sigmaY, int borderType)")
imgproc_resize = dll.api("imgproc_resize","pointer(pointer,pointer,struct,double,double,int)")
imgproc_threshold = dll.api("imgproc_threshold","int(pointer src,pointer dst,double thresh,double maxVal, int type, double& returnValue)")
imgproc_Canny1 = dll.api("imgproc_Canny1","int(pointer src,pointer edges,double threshold1,double threshold2,int apertureSize, bool L2gradient)" )
imgproc_arrowedLine = dll.api("imgproc_arrowedLine","int(pointer src,struct pt1,struct pt2,struct color,int thickness, int line_type, int shift, double tipLength)" )
imgproc_ellipse1 = dll.api("imgproc_ellipse1","int(pointer img,struct center,struct axes,double angle,double startAngle,double endAngle,struct color,int thickness,int lineType,int shift)")
imgproc_putText = dll.api("imgproc_putText","int(pointer img,string text,struct org,int fontFace,double fontScale,struct color,int thickness,int lineType, int bottomLeftOrigin)")
imgproc_adaptiveThreshold = dll.api("imgproc_adaptiveThreshold","INT(pointer src,pointer dst,double maxValue,int adaptiveMethod,int thresholdType, int blockSize,double C)")
core_minMaxLoc2 = dll.api("core_minMaxLoc2","INT(pointer src,double& minVal,double& maxVal,struct& minLoc,struct& maxLoc,pointer mask)")
core_addWeighted= dll.api("core_addWeighted","INT(pointer src1,double alpha,pointer &src2,double beta,double gamma,pointer dst,int dtype)")
videoio_VideoCapture_get = dll.api("videoio_VideoCapture_get","INT(pointer capture,int propId,double& ret)")
videoio_VideoCapture_set = dll.api("videoio_VideoCapture_set","INT(pointer capture,int propId,int& ret)")
dnn_blobFromImage= dll.api("dnn_blobFromImage","INT(pointer image,double scalefactor,struct size,struct mean,int swapRB,int crop,pointer& returnValue)")
namespace cv2{   
    import fsys
	import cv2.mat
	import cv2.types
	import cv2.vector
}

/**intellisense(cv2)
imread() = !matObject.
imread(.(图片路径,载入模式) = 读取图片
imshow(.(窗口标题,显示内容) = 弹出窗口,显示图片
destroyAllWindows() = 销毁所有cv2窗体
waitKey(0) = 窗口等待键盘指令,返回键位码
waitKey(.(延时 单位毫秒) = 窗口延时等待
namedWindow(.(窗口标题,缩放类型_CV2_WINDOW) = 设置cv窗口
cvGetWindowHandle(.(窗口标题) = 根据窗口标题获取cv窗口句柄
threshold(.(灰度图,起始值,最大值,二值化算法-默认THRESH_BINARY) = 图像阈值处理
adaptiveThreshold(.(灰度化图像,最大灰度值,自适应阈值算法,二值化方法,区域大小,常数 可为负数) = 自适应阈值二值化
medianBlur(.(源数据,核大小) = 中值滤波
resize(.(源数据,::SIZE对象,x轴缩放倍数,y轴缩放倍数,插值方式) = 调整图片大小
gaussianBlur(.(输入图像,::SIZE对象 高斯核大小,X方向上的高斯核标准偏差, Y方向上的高斯核标准差,边缘模式) = 高斯滤波
blur(.(输入图像,::SIZE对象 核大小) = 均值滤波,对于椒盐噪声的滤除效果比较好。
boxFilter(.(输入图像,输出图像深度 默认-1 与输入图像相同,::SIZE对象 核大小,是否标准化 默认true 为false时与blur函数相同,边缘模式) = 方块滤波
cvtColor(.(输入图像,颜色空间代码) = 转换颜色空间
canny(.(输入图像,阈值1,阈值2,Sobel算子大小 默认3,是否使用L2范数 默认true) = 边缘检测
line(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素,线条类型 可选 ) = 在输入图像上画线段
arrowedLine(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素 ,线条类型 可选,箭头笔尖的长度 默认0.1 ) = 在输入图像上画箭头线段
rectangle(.(输入图像,起点POINT对象,终点POINT对象,颜色Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画矩形
circle(.(输入图像,中心点坐标 POINT对象,圆半径,线条颜色 Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画圆形
ellipse(.(输入图像,椭圆中心坐标 POINT对象,椭圆长轴短轴 SIZE对象,椭圆旋转角度以度为单位,椭圆弧的起始角度以度为单位,椭圆弧的终止角度以度为单位,线条颜色 Scalar对象BGRA,线条宽度 默认1像素 为-1时填充闭合区域,线条类型 可选) = 在输入图像上画椭圆
drawMarker(.(输入图像,图案坐标,图案描边颜色,图案类型,图案尺寸 默认20,线条宽带 默认1像素,线条类型 可选) = 在输入图像上画图案
putText(.(输入图像,文字,左上角坐标,字体 可选,字体大小 可选,颜色Scalar对象BGRA 可选,字体粗细 可选) = 在输入图像上写文字
copyMakeBorder(.(输入图像,上边宽度,下边宽度,左边宽度,右边宽度,边界类型 可选,边框类型为0时,可设置边框颜色 默认黑色) = 扩充图像边框,返回新图像
getStructuringElement(.(元素形状 默认矩形,元素大小 ::SIZE对象,锚点位置 默认中心点) = 返回指定形状和尺寸的内核矩阵 
morphologyEx(.(输入图像,形态学类别,结构内核,迭代次数 默认为1) = 通用形态学变换,可作用在输入图像上
erode(.(输入图像,结构内核,迭代次数 默认为1) = 腐蚀操作
dilate(.(输入图像,结构内核,迭代次数 默认为1) = 膨胀操作
normalize(.(输入图像,alpha值,beta值) = 图像归一化
bitwise_and(.(输入图像1,输入图像2) = 对图像的每一个像素值进行逻辑与操作
bitwise_or(.(输入图像1,输入图像2) = 对图像的每一个像素值进行逻辑或操作
bitwise_xor(.(输入图像1,输入图像2) = 对图像的每一个像素值进行逻辑异或操作
bitwise_not(.(输入图像1,输入图像2) = 对图像的每一个像素值进行逻辑非操作
split(.(输入图像) = 将图像拆分成BGR通道图像,返回B G R 3个mat对象
merge(.(BGR通道图像数组)) = 将BGR通道图像合并
flip(.(输入图像,翻转码 1水平翻转 0垂直翻转 -1水平垂直翻转) = 图像翻转
rotate(.(输入图像,旋转码 _CV2_ROTATE_) = 将2D图像矩阵旋转90度的倍数
subtract(.(输入图像1,输入图像2,图像掩码 可选,输出图像深度 可选) = 图像减法运算
add(.(输入图像1,输入图像2,图像掩码 可选,输出图像深度 可选) = 图像加法运算
addWeighted(.(输入图像1,图像1权重,输入图像2,图像2权重,偏移量 缺省为0,深度 缺省-1) = 图像融合
matchTemplate(.(待搜索图像,模板图像,匹配模式 默认5,图像腌膜 可选) = 模板匹配
minMaxLoc(.(输入矩阵) = 返回输入矩阵的最小值,最大值,最小值索引,最大值索引
distanceTransform(.(输入图像,距离算法类型,距离变换腌膜大小) = 距离变换
findContours(.(输入图像,轮廓检索模式,轮廓近似方法) = 轮廓检测
drawContours(.(输入图像,轮廓数组,绘制起点 默认-1,线条颜色,线条宽度 为-1时填充图案,线条样式) = 在输入图像上绘制轮廓
minAreaRect(.(points点集合) = 获取最小外接矩形,返回RotatedRect对象
boxPoints(.(RotatedRect对象) = 矩形四角坐标,返回4个::POINTF对象数组
getTickCount() = 获取当前系统启动时间，单位毫秒
end intellisense**/

/**intellisense()
cv2.videoCapture() = 视频或摄像头解析对象
cv2.videoCapture( = 创建视频解析对象
cv2.videoCapture(.(摄像头编号或视频路径) = 创建视频解析对象
cv2.videoCapture() = !cap.
!cap.read() = 读取视频下一帧，返回读取状态,mat对象
!cap.isOpened = 检测视频或摄像头是否打开，注意：视频有时候并不准确
!cap.get(.(_CV2_CAP_PROP_) = 获取videoCapture对象参数
!cap.set(.(_CV2_CAP_PROP_) = 设置videoCapture对象参数
!cap.grab() = 从视频文件或捕获设备中获取下一帧
!cap.retrieve() = 解码并返回抓取的视频帧,返回mat对象
!cap.getBackendName() = 获取API后端名称
!cap.release() = 释放videoCapture对象,解除视频文件或摄像头占用
end intellisense**/

/**intellisense()
cv2.wechat_qrcode_WeChatQRCode() = 微信QRCode解码对象,相关模型至https://github.com/WeChatCV/opencv_3rdparty下载
cv2.wechat_qrcode_WeChatQRCode( = 创建微信QRCode解码对象
cv2.wechat_qrcode_WeChatQRCode(.(detect网络,detect权重,sr网络,sr权重) = 创建微信QRCode解码对象
cv2.wechat_qrcode_WeChatQRCode() = !QRCode.
!QRCode.detectAndDecode(.(输入图像) = 定位并解码二维码,返回 识别字符串数组,最小外接矩形四角POINT数组
!QRCode.release() = 释放微信QRCode解码对象,可自动回收
end intellisense**/


/**intellisense(!matObject)
type() = 图片类型
width = 图片宽度
height = 图片高度
channels() = 图片通道数
depth() = 图片深度
shape = 图片形状，包括高度、宽度、通道数
empty() = 判断是否图像是否为空
size() = 获取图片尺寸,返回::SIZE结构体
toBitmap() = 转换为bitmap对象,返回bitmap对象
end intellisense**/